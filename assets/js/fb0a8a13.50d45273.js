"use strict";(self.webpackChunkethberry_github_io=self.webpackChunkethberry_github_io||[]).push([[6299],{37864:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(74848),i=t(28453);const s={hide_table_of_contents:!0,sidebar_position:2},o="Automated raffle rounds",r={id:"game/mechanics-gambling/raffle/automation",title:"Automated raffle rounds",description:"SaaS platform does not allow merchants to automate raffle rounds because it requires us to collect and store private",source:"@site/api/game/mechanics-gambling/raffle/automation.md",sourceDirName:"game/mechanics-gambling/raffle",slug:"/game/mechanics-gambling/raffle/automation",permalink:"/api/game/mechanics-gambling/raffle/automation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{hide_table_of_contents:!0,sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Raffle",permalink:"/api/game/mechanics-gambling/raffle/"},next:{title:"Purchasing raffle tickets",permalink:"/api/game/mechanics-gambling/raffle/purchase"}},c={},l=[{value:"Step 1: get raffle contract",id:"step-1-get-raffle-contract",level:4},{value:"Step 2: execute transaction on blockchain",id:"step-2-execute-transaction-on-blockchain",level:4}];function p(n){const e={code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.RP)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"automated-raffle-rounds",children:"Automated raffle rounds"})}),"\n",(0,a.jsx)(e.p,{children:"SaaS platform does not allow merchants to automate raffle rounds because it requires us to collect and store private\nkeys, and we do not want to take such responsibilities."}),"\n",(0,a.jsx)(e.p,{children:"This is how raffle rounds could be automated using our API. Basically it just starts new round with config from the last one."}),"\n",(0,a.jsx)(e.h4,{id:"step-1-get-raffle-contract",children:"Step 1: get raffle contract"}),"\n",(0,a.jsx)(e.p,{children:"Request"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"curl -X 'GET' \\\n  'https://game-api.ethberry.io/raffle/contracts?skip=0&take=25&chainId=10001' \\\n  -H 'accept: */*' \\\n  -H 'Authorization: Bearer 11111111-2222-3333-4444-555555555555'\n"})}),"\n",(0,a.jsx)(e.p,{children:"Response"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "rows": [\n    {\n      "id": 12201,\n      "createdAt": "2024-03-15T02:09:10.938Z",\n      "updatedAt": "2024-03-15T02:09:10.938Z",\n      "address": "0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",\n      "chainId": 10001,\n      "title": "RAFFLE",\n      "description": "{\\"blocks\\":[{\\"key\\":\\"e9n5e\\",\\"text\\":\\"bold\\",\\"type\\":\\"unstyled\\",\\"depth\\":0,\\"inlineStyleRanges\\":[{\\"offset\\":0,\\"length\\":4,\\"style\\":\\"BOLD\\"}],\\"entityRanges\\":[],\\"data\\":{}},{\\"key\\":\\"dfijs\\",\\"text\\":\\"italic\\",\\"type\\":\\"unstyled\\",\\"depth\\":0,\\"inlineStyleRanges\\":[{\\"offset\\":0,\\"length\\":6,\\"style\\":\\"ITALIC\\"}],\\"entityRanges\\":[],\\"data\\":{}},{\\"key\\":\\"fdeqa\\",\\"text\\":\\"underscore\\",\\"type\\":\\"unstyled\\",\\"depth\\":0,\\"inlineStyleRanges\\":[{\\"offset\\":0,\\"length\\":10,\\"style\\":\\"UNDERLINE\\"}],\\"entityRanges\\":[],\\"data\\":{}},{\\"key\\":\\"4uhh1\\",\\"text\\":\\"strikethrough\\",\\"type\\":\\"unstyled\\",\\"depth\\":0,\\"inlineStyleRanges\\":[{\\"offset\\":0,\\"length\\":13,\\"style\\":\\"STRIKETHROUGH\\"}],\\"entityRanges\\":[],\\"data\\":{}}],\\"entityMap\\":{}}",\n      "merchantId": 1,\n      "imageUrl": "https://firebasestorage.googleapis.com/v0/b/gemunion-firebase.appspot.com/o/DO_NOT_REMOVE%2Flogo.png?alt=media&token=73cdfd99-1374-45e0-8140-5c02fc4d8097",\n      "name": "Raffle",\n      "symbol": "",\n      "decimals": 0,\n      "fromBlock": 0,\n      "royalty": 0,\n      "baseTokenURI": "",\n      "parameters": {\n        "timeLagBeforeRelease": "100",\n        "commission": "30",\n        "schedule": "0 0 * * 6,0",\n        "roundId": 103\n      },\n      "isPaused": false,\n      "contractStatus": "ACTIVE",\n      "contractType": null,\n      "contractFeatures": [\n        "RANDOM",\n        "ALLOWANCE",\n        "PAUSABLE"\n      ],\n      "contractModule": "RAFFLE",\n      "contractSecurity": "ACCESS_CONTROL",\n      "merchant": {\n        "id": 1,\n        "wallet": "0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"\n      }\n    }\n  ],\n  "count": 1\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"step-2-execute-transaction-on-blockchain",children:"Step 2: execute transaction on blockchain"}),"\n",(0,a.jsx)(e.p,{children:"Copy this JSON to your app"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'[\n  {\n    "inputs": [\n      {\n        "components": [\n          {\n            "internalType": "enum TokenType",\n            "name": "tokenType",\n            "type": "uint8"\n          },\n          {\n            "internalType": "address",\n            "name": "token",\n            "type": "address"\n          },\n          {\n            "internalType": "uint256",\n            "name": "tokenId",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "amount",\n            "type": "uint256"\n          }\n        ],\n        "internalType": "struct Asset",\n        "name": "ticket",\n        "type": "tuple"\n      },\n      {\n        "components": [\n          {\n            "internalType": "enum TokenType",\n            "name": "tokenType",\n            "type": "uint8"\n          },\n          {\n            "internalType": "address",\n            "name": "token",\n            "type": "address"\n          },\n          {\n            "internalType": "uint256",\n            "name": "tokenId",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "amount",\n            "type": "uint256"\n          }\n        ],\n        "internalType": "struct Asset",\n        "name": "price",\n        "type": "tuple"\n      },\n      {\n        "internalType": "uint256",\n        "name": "maxTicket",\n        "type": "uint256"\n      }\n    ],\n    "name": "startRound",\n    "outputs": [],\n    "stateMutability": "nonpayable",\n    "type": "function"\n  },\n  {\n    "inputs": [],\n    "name": "endRound",\n    "outputs": [],\n    "stateMutability": "nonpayable",\n    "type": "function"\n  },\n  {\n    "inputs": [],\n    "name": "getCurrentRoundInfo",\n    "outputs": [\n      {\n        "components": [\n          {\n            "internalType": "uint256",\n            "name": "roundId",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "startTimestamp",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "endTimestamp",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "maxTicket",\n            "type": "uint256"\n          },\n          {\n            "internalType": "uint256",\n            "name": "prizeNumber",\n            "type": "uint256"\n          },\n          {\n            "components": [\n              {\n                "internalType": "enum TokenType",\n                "name": "tokenType",\n                "type": "uint8"\n              },\n              {\n                "internalType": "address",\n                "name": "token",\n                "type": "address"\n              },\n              {\n                "internalType": "uint256",\n                "name": "tokenId",\n                "type": "uint256"\n              },\n              {\n                "internalType": "uint256",\n                "name": "amount",\n                "type": "uint256"\n              }\n            ],\n            "internalType": "struct Asset",\n            "name": "acceptedAsset",\n            "type": "tuple"\n          },\n          {\n            "components": [\n              {\n                "internalType": "enum TokenType",\n                "name": "tokenType",\n                "type": "uint8"\n              },\n              {\n                "internalType": "address",\n                "name": "token",\n                "type": "address"\n              },\n              {\n                "internalType": "uint256",\n                "name": "tokenId",\n                "type": "uint256"\n              },\n              {\n                "internalType": "uint256",\n                "name": "amount",\n                "type": "uint256"\n              }\n            ],\n            "internalType": "struct Asset",\n            "name": "ticketAsset",\n            "type": "tuple"\n          }\n        ],\n        "internalType": "struct RaffleRoundInfo",\n        "name": "",\n        "type": "tuple"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'})}),"\n",(0,a.jsx)(e.p,{children:"This code snippet is a simplified version of server side code we use in our application"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { JsonRpcProvider, Wallet } from "ethers";\n\nconst provider = new JsonRpcProvider(JSON_RPC_URL);\nconst instance = new Contract(constract.address, RaffleABI, new Wallet(PRIVATE_KEY, jsonRpcProvider));\nconst roundInfo = await instance.getCurrentRoundInfo();\n\nconst { roundId, endTimestamp, acceptedAsset, ticketAsset, maxTicket } = roundInfo;\n\n// if this is not the first round\nif (BigInt(roundId) !== 0n) {\n  // if current round still active - end round\n  if (BigInt(endTimestamp) === 0n) {\n    await instance.endRound();\n  }\n\n  await instance.startRound(acceptedAsset, ticketAsset, maxTicket);\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.RP)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{RP:()=>s,xA:()=>r});var a=t(96540);const i=a.createContext({});function s(n){const e=a.useContext(i);return a.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const o={};function r({components:n,children:e,disableParentContext:t}){let r;return r=t?"function"==typeof n?n({}):n||o:s(n),a.createElement(i.Provider,{value:r},e)}}}]);